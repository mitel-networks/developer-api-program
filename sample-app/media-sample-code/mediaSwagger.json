{
  "swagger": "2.0",
  "info": {
    "title": "platform-api-media-service",
    "version": "2017-09-01",
    "description": "Media Services API is used to manage calls on both the cloud call control and premise PBX systems.\n\rAll resources are secured by an API token passed in the Authorization header.\n\rCollection requests support basic OData syntax.  To manipulate paged data utilize the $skip & $top query string syntax. For example:\n\r* Get first 5 results: `/2017-09-01/calls?$top=5`\n\r* Skip 5 then get next 5 results: `/2017-09-01/calls$skip=5&$top=5`\n\rBasic filter syntax is supported for targeted queries.  For example:\n\r* Get inbound calls: `/2017-09-01/calls?$filter=\"direction eq 'inbound'\"`",
    "termsOfService": "https://mitel.io/termsofservice",
    "contact": {
      "name": "CloudLink support",
      "email": "cloudlink.support@mitel.io",
      "url": "https://mitel.io/support"
    },
    "license": {
      "name": "Mitel",
      "url": "https://mitel.io/license"
    }
  },
  "host": "media.us-west-2.us.dev.api.mitel.io",
  "basePath": "/2017-09-01",
  "schemes": [
    "https"
  ],
  "tags": [
    {
      "name": "Endpoint",
      "description": "Controllable endpoints registered to the cloud and / or premise PBX"
    },
    {
      "name": "Call History",
      "description": "Operations related to call history"
    },
    {
      "name": "Conference",
      "description": "Operations related to conference resource"
    },
    {
      "name": "Participant",
      "description": "Operations related to participant resource"
    },
    {
      "name": "Recording",
      "description": "Call recording generated by calls within the system"
    }
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "responses": {
    "Standard200Response": {
      "description": "Success"
    },
    "Standard201Response": {
      "description": "Created"
    },
    "Standard202Response": {
      "description": "Accepted"
    },
    "Standard400ErrorResponse": {
      "description": "The request was invalid. Check error message for details. \n",
      "schema": {
        "$ref": "#/definitions/error"
      },
      "headers": {
        "Access-Control-Allow-Origin": {
          "type": "string"
        }
      }
    },
    "Standard401ErrorResponse": {
      "description": "The request requires user authentication. The authorization has been refused.\n",
      "schema": {
        "$ref": "#/definitions/error"
      },
      "headers": {
        "Access-Control-Allow-Origin": {
          "type": "string"
        }
      }
    },
    "Standard403ErrorResponse": {
      "description": "The request was refused. Feature not allowed.",
      "schema": {
        "$ref": "#/definitions/error"
      },
      "headers": {
        "Access-Control-Allow-Origin": {
          "type": "string"
        }
      }
    },
    "Standard404ErrorResponse": {
      "description": "The request can not be served. Invalid identifier.",
      "schema": {
        "$ref": "#/definitions/error"
      },
      "headers": {
        "Access-Control-Allow-Origin": {
          "type": "string"
        }
      }
    },
    "Standard409ErrorResponse": {
      "description": "The request has a conflict with another resource on the server.",
      "schema": {
        "$ref": "#/definitions/error"
      },
      "headers": {
        "Access-Control-Allow-Origin": {
          "type": "string"
        }
      }
    },
    "Standard422ErrorResponse": {
      "description": "The request was unable to be processed. Please try again.\n",
      "schema": {
        "$ref": "#/definitions/error"
      },
      "headers": {
        "Access-Control-Allow-Origin": {
          "type": "string"
        }
      }
    },
    "Standard429ErrorResponse": {
      "description": "There were too many requests. Please try again.\n",
      "schema": {
        "$ref": "#/definitions/error"
      },
      "headers": {
        "Access-Control-Allow-Origin": {
          "type": "string"
        }
      }
    },
    "Standard500ErrorResponse": {
      "description": "Unexpected error detected on the server.",
      "schema": {
        "$ref": "#/definitions/error"
      },
      "headers": {
        "Access-Control-Allow-Origin": {
          "type": "string"
        }
      }
    },
    "Standard504ErrorResponse": {
      "description": "Gateway timeout. Unable to get response in a timely fashion.",
      "schema": {
        "$ref": "#/definitions/error"
      },
      "headers": {
        "Access-Control-Allow-Origin": {
          "type": "string"
        }
      }
    }
  },
  "parameters": {
    "accountId": {
      "name": "accountId",
      "in": "path",
      "required": true,
      "description": "Account Identifier",
      "type": "string"
    },
    "siteId": {
      "name": "siteId",
      "in": "path",
      "description": "Site Identifier",
      "required": true,
      "type": "string"
    },
    "userId": {
      "name": "userId",
      "in": "query",
      "required": false,
      "description": "User Identifier",
      "type": "string"
    },
    "principalId": {
      "name": "principalId",
      "in": "path",
      "required": true,
      "description": "Principal Identifier",
      "type": "string"
    },
    "endpointId": {
      "name": "endpointId",
      "in": "path",
      "required": true,
      "description": "Device Identifier",
      "type": "string"
    },
    "callId": {
      "name": "callId",
      "in": "path",
      "required": true,
      "description": "Call Identifier",
      "type": "string"
    },
    "extensionNumber": {
      "name": "extensionNumber",
      "in": "path",
      "required": true,
      "description": "Extension number Identifier, the value is the extension. It is a dialable number including * and #",
      "type": "string"
    },
    "skipParam": {
      "name": "$skip",
      "in": "query",
      "description": "Number of items to skip",
      "required": false,
      "type": "integer",
      "format": "int32"
    },
    "skipTokenParam": {
      "name": "$skiptoken",
      "in": "query",
      "description": "Continuation token from previous query for paging",
      "required": false,
      "type": "string"
    },
    "topParam": {
      "name": "$top",
      "in": "query",
      "description": "Number of items to include",
      "required": false,
      "type": "integer",
      "format": "int32"
    },
    "filterParam": {
      "name": "$filter",
      "in": "query",
      "description": "Odata filter param",
      "required": false,
      "type": "string"
    },
    "orderbyParam": {
      "name": "$orderby",
      "in": "query",
      "description": "Odata filter param",
      "required": false,
      "type": "string"
    },
    "expandParam": {
      "name": "$expand",
      "in": "query",
      "description": "Odata expand param",
      "required": false,
      "type": "string"
    },
    "recordingIdParam": {
      "name": "recordingId",
      "in": "path",
      "required": true,
      "description": "ID of the recording",
      "type": "string"
    },
    "participantIdParam": {
      "name": "participantId",
      "in": "path",
      "required": true,
      "description": "ID of the participant",
      "type": "string"
    },
    "conferenceIdParam": {
      "name": "conferenceId",
      "in": "path",
      "required": true,
      "description": "ID of the conference",
      "type": "string"
    },
    "searchParam": {
      "name": "$search",
      "in": "query",
      "required": true,
      "description": "The search term to be executed, one or more words",
      "type": "string"
    }
  },
  "paths": {
    "/calls/records": {
      "get": {
        "tags": [
          "Call History"
        ],
        "operationId": "getCallRecords",
        "summary": "Get call records",
        "description": "Retrieves call records. Example - $filter=contains(principal, '76f110ca-f769-4020-95cd-dc75d391d7f1')",
        "parameters": [
          {
            "$ref": "#/parameters/skipParam"
          },
          {
            "$ref": "#/parameters/topParam"
          },
          {
            "$ref": "#/parameters/filterParam"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success returns User call history records.",
            "schema": {
              "$ref": "#/definitions/callCollection"
            },
            "headers": {
              "Access-Control-Allow-Origin": {
                "type": "string"
              }
            }
          },
          "400": {
            "$ref": "#/responses/Standard400ErrorResponse"
          },
          "401": {
            "$ref": "#/responses/Standard401ErrorResponse"
          },
          "403": {
            "$ref": "#/responses/Standard403ErrorResponse"
          },
          "404": {
            "$ref": "#/responses/Standard404ErrorResponse"
          },
          "500": {
            "$ref": "#/responses/Standard500ErrorResponse"
          }
        },
        "security": [
          {
            "cloudlink-user-authorizer": []
          },
          {
            "cloudlink-client-authorizer": []
          }
        ]
      },
      "put": {
        "tags": [
          "Call History"
        ],
        "operationId": "updateCallRecords",
        "summary": "Update call history records.",
        "description": "Update call records.",
        "parameters": [
          {
            "$ref": "#/parameters/filterParam"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/callRecordPutRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success if call history records are put to hidden state.",
            "headers": {
              "Access-Control-Allow-Origin": {
                "type": "string"
              }
            }
          },
          "400": {
            "$ref": "#/responses/Standard400ErrorResponse"
          },
          "401": {
            "$ref": "#/responses/Standard401ErrorResponse"
          },
          "403": {
            "$ref": "#/responses/Standard403ErrorResponse"
          },
          "404": {
            "$ref": "#/responses/Standard404ErrorResponse"
          },
          "500": {
            "$ref": "#/responses/Standard500ErrorResponse"
          }
        },
        "security": [
          {
            "cloudlink-user-authorizer": []
          },
          {
            "cloudlink-client-authorizer": []
          }
        ]
      }
    },
    "/calls/{callId}/records": {
      "get": {
        "tags": [
          "Call History"
        ],
        "operationId": "getCallRecord",
        "summary": "Get a call record",
        "description": "Retrieves a call record.",
        "parameters": [
          {
            "name": "callId",
            "description": "callId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success returns call history record(s).",
            "schema": {
              "$ref": "#/definitions/callCollection"
            },
            "headers": {
              "Access-Control-Allow-Origin": {
                "type": "string"
              }
            }
          },
          "400": {
            "$ref": "#/responses/Standard400ErrorResponse"
          },
          "401": {
            "$ref": "#/responses/Standard401ErrorResponse"
          },
          "403": {
            "$ref": "#/responses/Standard403ErrorResponse"
          },
          "404": {
            "$ref": "#/responses/Standard404ErrorResponse"
          },
          "500": {
            "$ref": "#/responses/Standard500ErrorResponse"
          }
        },
        "security": [
          {
            "cloudlink-user-authorizer": []
          },
          {
            "cloudlink-client-authorizer": []
          }
        ]
      },
      "put": {
        "tags": [
          "Call History"
        ],
        "operationId": "updateCallRecord",
        "summary": "Update a call record.",
        "description": "Update call record.",
        "parameters": [
          {
            "name": "callId",
            "description": "callId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/callRecordPutRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success if call record updated.",
            "headers": {
              "Access-Control-Allow-Origin": {
                "type": "string"
              }
            }
          },
          "400": {
            "$ref": "#/responses/Standard400ErrorResponse"
          },
          "401": {
            "$ref": "#/responses/Standard401ErrorResponse"
          },
          "403": {
            "$ref": "#/responses/Standard403ErrorResponse"
          },
          "404": {
            "$ref": "#/responses/Standard404ErrorResponse"
          },
          "500": {
            "$ref": "#/responses/Standard500ErrorResponse"
          }
        },
        "security": [
          {
            "cloudlink-user-authorizer": []
          },
          {
            "cloudlink-client-authorizer": []
          }
        ]
      }
    },
    "/conferences": {
      "get": {
        "tags": [
          "Conference"
        ],
        "operationId": "getConferences",
        "summary": "Get Conferences",
        "description": "Retrieve all conference calls for this account. Data is paged on the server and sorted by most recent conference first. \n*Available Filter Operations*: [eq, ne, lt, gt, le, ge, and, or], e.g. $filter=accessCode eq '339323008' or $filter=name eq 'MyMeeting' , or &filter=externalConferenceId eq '2307d9a7-abc1-4f02-946a-ee8a2c3c143b'\n*Expandable subresources: tags. \n*Special query string*: containsAllParticipants=participantId1,participantId2,me,...participantIdx",
        "parameters": [
          {
            "$ref": "#/parameters/skipParam"
          },
          {
            "$ref": "#/parameters/skipTokenParam"
          },
          {
            "$ref": "#/parameters/topParam"
          },
          {
            "$ref": "#/parameters/filterParam"
          },
          {
            "$ref": "#/parameters/orderbyParam"
          },
          {
            "$ref": "#/parameters/expandParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "$ref": "#/definitions/conferenceCollection"
            },
            "headers": {
              "Access-Control-Allow-Origin": {
                "type": "string"
              }
            }
          },
          "401": {
            "$ref": "#/responses/Standard401ErrorResponse"
          },
          "500": {
            "$ref": "#/responses/Standard500ErrorResponse"
          }
        },
        "security": [
          {
            "cloudlink-user-authorizer": []
          },
          {
            "cloudlink-client-authorizer": []
          }
        ]
      },
      "post": {
        "tags": [
          "Conference"
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "operationId": "createConference",
        "summary": "Create a Conference",
        "description": "Create a conference by using the provided details in this request body.",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/postConferenceRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/conference"
            },
            "headers": {
              "Access-Control-Allow-Origin": {
                "type": "string"
              }
            }
          },
          "202": {
            "description": "Accepted",
            "headers": {
              "Access-Control-Allow-Origin": {
                "type": "string"
              }
            }
          },
          "400": {
            "$ref": "#/responses/Standard400ErrorResponse"
          },
          "401": {
            "$ref": "#/responses/Standard401ErrorResponse"
          },
          "403": {
            "$ref": "#/responses/Standard403ErrorResponse"
          },
          "404": {
            "$ref": "#/responses/Standard404ErrorResponse"
          },
          "409": {
            "$ref": "#/responses/Standard409ErrorResponse"
          },
          "500": {
            "$ref": "#/responses/Standard500ErrorResponse"
          }
        },
        "security": [
          {
            "cloudlink-user-authorizer": []
          },
          {
            "cloudlink-client-authorizer": []
          }
        ]
      }
    },
    "/conferences/{conferenceId}": {
      "get": {
        "tags": [
          "Conference"
        ],
        "parameters": [
          {
            "name": "conferenceId",
            "description": "conferenceId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/expandParam"
          }
        ],
        "operationId": "getConference",
        "summary": "Get a conference",
        "description": "Gets the meta data for this conference. The result is limited by ownership of the conference.  Future extensions will include start/stop recordings.  TODO Conference will be created to use either the Mitel numbers or the customer dial in numbers.",
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "$ref": "#/definitions/conference"
            },
            "headers": {
              "Access-Control-Allow-Origin": {
                "type": "string"
              }
            }
          },
          "401": {
            "$ref": "#/responses/Standard401ErrorResponse"
          },
          "403": {
            "$ref": "#/responses/Standard403ErrorResponse"
          },
          "404": {
            "$ref": "#/responses/Standard404ErrorResponse"
          },
          "500": {
            "$ref": "#/responses/Standard500ErrorResponse"
          }
        },
        "security": [
          {
            "cloudlink-user-authorizer": []
          },
          {
            "cloudlink-client-authorizer": []
          }
        ]
      },
      "post": {
        "tags": [
          "Conference"
        ],
        "operationId": "runConferenceControlCommand",
        "summary": "Perform an action on a conference",
        "description": "Perform an action on a conference",
        "parameters": [
          {
            "name": "conferenceId",
            "description": "conferenceId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/postConferenceByIdRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "$ref": "#/definitions/conference"
            },
            "headers": {
              "Access-Control-Allow-Origin": {
                "type": "string"
              }
            }
          },
          "400": {
            "$ref": "#/responses/Standard400ErrorResponse"
          },
          "401": {
            "$ref": "#/responses/Standard401ErrorResponse"
          },
          "403": {
            "$ref": "#/responses/Standard403ErrorResponse"
          },
          "404": {
            "$ref": "#/responses/Standard404ErrorResponse"
          },
          "409": {
            "$ref": "#/responses/Standard409ErrorResponse"
          },
          "500": {
            "$ref": "#/responses/Standard500ErrorResponse"
          }
        },
        "security": [
          {
            "cloudlink-user-authorizer": []
          },
          {
            "cloudlink-client-authorizer": []
          }
        ]
      },
      "put": {
        "tags": [
          "Conference"
        ],
        "operationId": "updateConference",
        "summary": "Update a conference",
        "description": "Update the properties of this conference",
        "parameters": [
          {
            "name": "conferenceId",
            "description": "conferenceId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/updateConferenceRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "$ref": "#/definitions/conference"
            },
            "headers": {
              "Access-Control-Allow-Origin": {
                "type": "string"
              }
            }
          },
          "400": {
            "$ref": "#/responses/Standard400ErrorResponse"
          },
          "401": {
            "$ref": "#/responses/Standard401ErrorResponse"
          },
          "403": {
            "$ref": "#/responses/Standard403ErrorResponse"
          },
          "404": {
            "$ref": "#/responses/Standard404ErrorResponse"
          },
          "409": {
            "$ref": "#/responses/Standard409ErrorResponse"
          },
          "500": {
            "$ref": "#/responses/Standard500ErrorResponse"
          }
        },
        "security": [
          {
            "cloudlink-user-authorizer": []
          },
          {
            "cloudlink-client-authorizer": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Conference"
        ],
        "operationId": "deleteConference",
        "summary": "Delete a conference",
        "description": "Delete an conference",
        "parameters": [
          {
            "name": "conferenceId",
            "description": "conferenceId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/Standard200Response"
          },
          "401": {
            "$ref": "#/responses/Standard401ErrorResponse"
          },
          "403": {
            "$ref": "#/responses/Standard403ErrorResponse"
          },
          "404": {
            "$ref": "#/responses/Standard404ErrorResponse"
          },
          "500": {
            "$ref": "#/responses/Standard500ErrorResponse"
          }
        },
        "security": [
          {
            "cloudlink-user-authorizer": []
          },
          {
            "cloudlink-client-authorizer": []
          }
        ]
      }
    },
    "/conferences/{conferenceId}/participants": {
      "get": {
        "tags": [
          "Participant"
        ],
        "operationId": "getParticipants",
        "summary": "Get Participants of a Conference",
        "description": "Get the participants for a conference with the provided ID.",
        "parameters": [
          {
            "name": "conferenceId",
            "description": "Conference ID",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/skipParam"
          },
          {
            "$ref": "#/parameters/skipTokenParam"
          },
          {
            "$ref": "#/parameters/topParam"
          },
          {
            "$ref": "#/parameters/filterParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "$ref": "#/definitions/participantCollection"
            },
            "headers": {
              "Access-Control-Allow-Origin": {
                "type": "string"
              }
            }
          },
          "401": {
            "$ref": "#/responses/Standard401ErrorResponse"
          },
          "500": {
            "$ref": "#/responses/Standard500ErrorResponse"
          }
        },
        "security": [
          {
            "cloudlink-user-authorizer": []
          },
          {
            "cloudlink-client-authorizer": []
          }
        ]
      },
      "post": {
        "tags": [
          "Participant"
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "operationId": "createParticipant",
        "summary": "Add a Participant",
        "description": "Add a participant into the conference with the provided ID.",
        "parameters": [
          {
            "name": "conferenceId",
            "description": "Conference ID",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/postConferenceParticipantRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "$ref": "#/definitions/participant"
            },
            "headers": {
              "Access-Control-Allow-Origin": {
                "type": "string"
              }
            }
          },
          "202": {
            "description": "Accepted",
            "headers": {
              "Access-Control-Allow-Origin": {
                "type": "string"
              }
            }
          },
          "400": {
            "$ref": "#/responses/Standard400ErrorResponse"
          },
          "401": {
            "$ref": "#/responses/Standard401ErrorResponse"
          },
          "403": {
            "$ref": "#/responses/Standard403ErrorResponse"
          },
          "404": {
            "$ref": "#/responses/Standard404ErrorResponse"
          },
          "409": {
            "$ref": "#/responses/Standard409ErrorResponse"
          },
          "500": {
            "$ref": "#/responses/Standard500ErrorResponse"
          }
        },
        "security": [
          {
            "cloudlink-user-authorizer": []
          },
          {
            "cloudlink-client-authorizer": []
          }
        ]
      }
    },
    "/conferences/{conferenceId}/participants/{participantId}": {
      "get": {
        "tags": [
          "Participant"
        ],
        "operationId": "getParticipant",
        "summary": "Get a Participant",
        "description": "Get the participant for the provided ID.",
        "parameters": [
          {
            "name": "conferenceId",
            "description": "Conference Identifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "participantId",
            "description": "Participant Identifier",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "$ref": "#/definitions/participant"
            },
            "headers": {
              "Access-Control-Allow-Origin": {
                "type": "string"
              }
            }
          },
          "401": {
            "$ref": "#/responses/Standard401ErrorResponse"
          },
          "403": {
            "$ref": "#/responses/Standard403ErrorResponse"
          },
          "404": {
            "$ref": "#/responses/Standard404ErrorResponse"
          },
          "500": {
            "$ref": "#/responses/Standard500ErrorResponse"
          }
        },
        "security": [
          {
            "cloudlink-user-authorizer": []
          },
          {
            "cloudlink-client-authorizer": []
          }
        ]
      },
      "put": {
        "tags": [
          "Participant"
        ],
        "operationId": "updateConferenceParticipant",
        "summary": "Update a conference participant",
        "description": "Update the properties of this participant for given conference",
        "parameters": [
          {
            "$ref": "#/parameters/conferenceIdParam"
          },
          {
            "$ref": "#/parameters/participantIdParam"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/updateConferenceParticipantRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "$ref": "#/definitions/participant"
            },
            "headers": {
              "Access-Control-Allow-Origin": {
                "type": "string"
              }
            }
          },
          "400": {
            "$ref": "#/responses/Standard400ErrorResponse"
          },
          "401": {
            "$ref": "#/responses/Standard401ErrorResponse"
          },
          "403": {
            "$ref": "#/responses/Standard403ErrorResponse"
          },
          "404": {
            "$ref": "#/responses/Standard404ErrorResponse"
          },
          "409": {
            "$ref": "#/responses/Standard409ErrorResponse"
          },
          "500": {
            "$ref": "#/responses/Standard500ErrorResponse"
          }
        },
        "security": [
          {
            "cloudlink-user-authorizer": []
          },
          {
            "cloudlink-client-authorizer": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Participant"
        ],
        "operationId": "deleteParticipant",
        "summary": "Remove a Participant",
        "description": "Remove participant form this conference.",
        "parameters": [
          {
            "name": "conferenceId",
            "description": "Conference Identifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "participantId",
            "description": "Pariticipant Identifier",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "headers": {
              "Access-Control-Allow-Origin": {
                "type": "string"
              }
            }
          },
          "401": {
            "$ref": "#/responses/Standard401ErrorResponse"
          },
          "403": {
            "$ref": "#/responses/Standard403ErrorResponse"
          },
          "404": {
            "$ref": "#/responses/Standard404ErrorResponse"
          },
          "500": {
            "$ref": "#/responses/Standard500ErrorResponse"
          }
        },
        "security": [
          {
            "cloudlink-user-authorizer": []
          },
          {
            "cloudlink-client-authorizer": []
          }
        ]
      }
    },
    "/conferences/{conferenceId}/participants/{participantId}/connections": {
      "post": {
        "tags": [
          "Participant"
        ],
        "operationId": "createParticipantConnection",
        "summary": "Creates connection details for this participant",
        "description": "Used to get a client side token and URL for connecting to the conference.",
        "parameters": [
          {
            "name": "conferenceId",
            "description": "Conference identifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "participantId",
            "description": "Participant identifer",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "$ref": "#/definitions/participantConnection"
            },
            "headers": {
              "Access-Control-Allow-Origin": {
                "type": "string"
              }
            }
          },
          "401": {
            "$ref": "#/responses/Standard401ErrorResponse"
          },
          "403": {
            "$ref": "#/responses/Standard403ErrorResponse"
          },
          "404": {
            "$ref": "#/responses/Standard404ErrorResponse"
          },
          "429": {
            "$ref": "#/responses/Standard429ErrorResponse"
          },
          "500": {
            "$ref": "#/responses/Standard500ErrorResponse"
          }
        },
        "security": [
          {
            "cloudlink-user-authorizer": []
          },
          {
            "cloudlink-client-authorizer": []
          }
        ]
      }
    },
    "/conferences/content": {
      "get": {
        "tags": [
          "Conference"
        ],
        "operationId": "searchConferenceContent",
        "summary": "Search conferencing resources",
        "description": "Search conferencing resources based on provided OData parameters.",
        "parameters": [
          {
            "$ref": "#/parameters/searchParam"
          },
          {
            "$ref": "#/parameters/skipParam"
          },
          {
            "$ref": "#/parameters/topParam"
          },
          {
            "$ref": "#/parameters/filterParam"
          },
          {
            "$ref": "#/parameters/expandParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "$ref": "#/definitions/contentResultCollection"
            }
          },
          "401": {
            "$ref": "#/responses/Standard401ErrorResponse"
          },
          "500": {
            "$ref": "#/responses/Standard500ErrorResponse"
          }
        },
        "security": [
          {
            "cloudlink-user-authorizer": []
          },
          {
            "cloudlink-client-authorizer": []
          }
        ]
      }
    },
    "/endpoints/{endpointId}": {
      "get": {
        "summary": "Get an Endpoint State",
        "description": "Gets the current state of the endpoint for the provided ID. Sometimes referred to as line state.\n",
        "operationId": "getEndpoint",
        "tags": [
          "Endpoint"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/endpointId"
          }
        ],
        "responses": {
          "200": {
            "description": "Success. Returns the detail state of the device.",
            "schema": {
              "$ref": "#/definitions/endpoint"
            },
            "headers": {
              "Access-Control-Allow-Origin": {
                "type": "string"
              }
            }
          },
          "400": {
            "$ref": "#/responses/Standard400ErrorResponse"
          },
          "401": {
            "$ref": "#/responses/Standard401ErrorResponse"
          },
          "404": {
            "$ref": "#/responses/Standard404ErrorResponse"
          },
          "500": {
            "$ref": "#/responses/Standard500ErrorResponse"
          },
          "504": {
            "$ref": "#/responses/Standard504ErrorResponse"
          }
        },
        "security": [
          {
            "cloudlink-user-authorizer": []
          },
          {
            "cloudlink-client-authorizer": []
          }
        ]
      },
      "put": {
        "summary": "Change an Endpoint State",
        "description": "Used for changing the state of the endpoint such as set do not disturb or turn on message waiting indicator for desktop phones.\n",
        "operationId": "updateEndpoint",
        "tags": [
          "Endpoint"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/endpointId"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/updateEndpointRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success. Returns and the detail state of the device.",
            "schema": {
              "$ref": "#/definitions/endpoint"
            },
            "headers": {
              "Access-Control-Allow-Origin": {
                "type": "string"
              }
            }
          },
          "202": {
            "description": "Accepted",
            "headers": {
              "Access-Control-Allow-Origin": {
                "type": "string"
              }
            }
          },
          "400": {
            "$ref": "#/responses/Standard400ErrorResponse"
          },
          "401": {
            "$ref": "#/responses/Standard401ErrorResponse"
          },
          "404": {
            "$ref": "#/responses/Standard404ErrorResponse"
          },
          "500": {
            "$ref": "#/responses/Standard500ErrorResponse"
          },
          "504": {
            "$ref": "#/responses/Standard504ErrorResponse"
          }
        },
        "security": [
          {
            "cloudlink-user-authorizer": []
          },
          {
            "cloudlink-client-authorizer": []
          }
        ]
      }
    },
    "/endpoints/{endpointId}/calls": {
      "get": {
        "summary": "List Active Calls",
        "description": "Get a list of active calls currently associated to the endpoint for the provided ID.\n",
        "operationId": "getEndpointCalls",
        "tags": [
          "Endpoint"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/endpointId"
          },
          {
            "$ref": "#/parameters/skipParam"
          },
          {
            "$ref": "#/parameters/topParam"
          },
          {
            "$ref": "#/parameters/filterParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/callCollection"
            },
            "headers": {
              "Access-Control-Allow-Origin": {
                "type": "string"
              }
            }
          },
          "400": {
            "$ref": "#/responses/Standard400ErrorResponse"
          },
          "401": {
            "$ref": "#/responses/Standard401ErrorResponse"
          },
          "404": {
            "$ref": "#/responses/Standard404ErrorResponse"
          },
          "500": {
            "$ref": "#/responses/Standard500ErrorResponse"
          },
          "504": {
            "$ref": "#/responses/Standard504ErrorResponse"
          }
        },
        "security": [
          {
            "cloudlink-user-authorizer": []
          },
          {
            "cloudlink-client-authorizer": []
          }
        ]
      },
      "post": {
        "summary": "Make a Call",
        "description": "Make a call from an endpoint to a destination.",
        "operationId": "createEndpointCall",
        "tags": [
          "Endpoint"
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/endpointId"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/createCallRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success. Returns details of the call.",
            "schema": {
              "$ref": "#/definitions/call"
            },
            "headers": {
              "Access-Control-Allow-Origin": {
                "type": "string"
              }
            }
          },
          "400": {
            "$ref": "#/responses/Standard400ErrorResponse"
          },
          "401": {
            "$ref": "#/responses/Standard401ErrorResponse"
          },
          "403": {
            "$ref": "#/responses/Standard403ErrorResponse"
          },
          "404": {
            "$ref": "#/responses/Standard404ErrorResponse"
          },
          "500": {
            "$ref": "#/responses/Standard500ErrorResponse"
          },
          "504": {
            "$ref": "#/responses/Standard504ErrorResponse"
          }
        },
        "security": [
          {
            "cloudlink-user-authorizer": []
          },
          {
            "cloudlink-client-authorizer": []
          }
        ]
      }
    },
    "/endpoints/{endpointId}/calls/{callId}": {
      "get": {
        "summary": "Get an Active Call State",
        "description": "Get the snapshot of the call with provided call ID, associated with the endpoint of the provided endpoint ID.",
        "operationId": "getEndpointCall",
        "tags": [
          "Endpoint"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/endpointId"
          },
          {
            "$ref": "#/parameters/callId"
          }
        ],
        "responses": {
          "200": {
            "description": "Success. Returns details of the call.",
            "schema": {
              "$ref": "#/definitions/call"
            },
            "headers": {
              "Access-Control-Allow-Origin": {
                "type": "string"
              }
            }
          },
          "400": {
            "$ref": "#/responses/Standard400ErrorResponse"
          },
          "401": {
            "$ref": "#/responses/Standard401ErrorResponse"
          },
          "403": {
            "$ref": "#/responses/Standard403ErrorResponse"
          },
          "404": {
            "$ref": "#/responses/Standard404ErrorResponse"
          },
          "500": {
            "$ref": "#/responses/Standard500ErrorResponse"
          },
          "504": {
            "$ref": "#/responses/Standard504ErrorResponse"
          }
        },
        "security": [
          {
            "cloudlink-user-authorizer": []
          },
          {
            "cloudlink-client-authorizer": []
          }
        ]
      },
      "put": {
        "summary": "Change an Active Call State",
        "description": "Change the state of the call by issuing an appropriate action to take on the call, for the provided call ID associated with a provided endpoint ID. Some actions require additional arguments.\n\rExamples\n\rTo toggle the holding state of the call\n\r`{ \"action\": \"hold\"}`\n\rTo make a blind transfer\n\r`{ \"action\": \"blindTransfer\", \"destination\": \"5555\"}`\n\rTo conference a consultation call with the call on hold\n\r`{ \"action\": \"conference\" }`\n\rTo make a supervised transfer\n\r`{ \"action\": \"supervisedTransfer\", \"callId\": \"5555555555\"} (coming soon)`\n\rTo consult call\n\r`{ \"action\": \"consult\", \"destination\": \"5555\"}`\n\rTo pause a recording\n\r`{ \"action\": \"pauseRecording\" }`\n\rTo resume a paused recording\n\r`{ \"action\": \"resumeRecording\" }`\n\rTo tag the recording\n\r`{ \"action\": \"tagRecording\", \"args\": \"{ \\\"CustomP100\\\": \\\"Queue Name\\\", \\\"CustomP101\\\": \\\"Queue Disable\\\" }\" }`\n\r\n\rFor additional actions and arguments see object model definition.",
        "operationId": "updateCallByEndpointId",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/endpointId"
          },
          {
            "$ref": "#/parameters/callId"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/updateEndpointCallRequest"
            }
          }
        ],
        "tags": [
          "Endpoint"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/Standard200Response"
          },
          "202": {
            "$ref": "#/responses/Standard202Response"
          },
          "400": {
            "$ref": "#/responses/Standard400ErrorResponse"
          },
          "401": {
            "$ref": "#/responses/Standard401ErrorResponse"
          },
          "403": {
            "$ref": "#/responses/Standard403ErrorResponse"
          },
          "404": {
            "$ref": "#/responses/Standard404ErrorResponse"
          },
          "500": {
            "$ref": "#/responses/Standard500ErrorResponse"
          },
          "504": {
            "$ref": "#/responses/Standard504ErrorResponse"
          }
        },
        "security": [
          {
            "cloudlink-user-authorizer": []
          },
          {
            "cloudlink-client-authorizer": []
          }
        ]
      }
    },
    "/recordings": {
      "get": {
        "tags": [
          "Recording"
        ],
        "operationId": "getRecordings",
        "summary": "Get all the recordings in the account",
        "description": "Get all the recordings in the account. Recordings that you don't have permission to view will not be returned. Only meta data of the recordings are returned. If you want the actual media file, use GET /recordings/<id>. A filter on callId can be specified. Example: $filter = callId eq 'some callId/conference Id'",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/skipParam"
          },
          {
            "$ref": "#/parameters/topParam"
          },
          {
            "$ref": "#/parameters/filterParam"
          },
          {
            "$ref": "#/parameters/orderbyParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "$ref": "#/definitions/recordingCollection"
            }
          },
          "400": {
            "$ref": "#/responses/Standard400ErrorResponse"
          },
          "401": {
            "$ref": "#/responses/Standard401ErrorResponse"
          },
          "403": {
            "$ref": "#/responses/Standard403ErrorResponse"
          },
          "500": {
            "$ref": "#/responses/Standard500ErrorResponse"
          },
          "504": {
            "$ref": "#/responses/Standard504ErrorResponse"
          }
        },
        "security": [
          {
            "cloudlink-user-authorizer": []
          },
          {
            "cloudlink-client-authorizer": []
          }
        ]
      }
    },
    "/recordings/{recordingId}": {
      "get": {
        "tags": [
          "Recording"
        ],
        "operationId": "getRecording",
        "summary": "Get the recording meta data and optionally the media file",
        "description": "By default, this returns just the meta data of the recording. To get the media file, specify $expand=media. A time limited URL is returned in the _embedded portion that can be used to retrieve the media file.",
        "parameters": [
          {
            "$ref": "#/parameters/recordingIdParam"
          },
          {
            "name": "media-format",
            "in": "query",
            "description": "Format of the file in the embedded media link.",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Recording metadata",
            "schema": {
              "$ref": "#/definitions/recording"
            },
            "headers": {
              "Access-Control-Allow-Origin": {
                "type": "string"
              }
            }
          },
          "400": {
            "$ref": "#/responses/Standard400ErrorResponse"
          },
          "401": {
            "$ref": "#/responses/Standard401ErrorResponse"
          },
          "403": {
            "$ref": "#/responses/Standard403ErrorResponse"
          },
          "404": {
            "$ref": "#/responses/Standard404ErrorResponse"
          },
          "500": {
            "$ref": "#/responses/Standard500ErrorResponse"
          },
          "504": {
            "$ref": "#/responses/Standard504ErrorResponse"
          }
        },
        "security": [
          {
            "cloudlink-user-authorizer": []
          },
          {
            "cloudlink-client-authorizer": []
          }
        ]
      },
      "put": {
        "tags": [
          "Recording"
        ],
        "operationId": "updateRecording",
        "summary": "Update a recording's metadata",
        "description": "Update the meta data of a recording",
        "parameters": [
          {
            "$ref": "#/parameters/recordingIdParam"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/updateRecordingRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Recording metadata",
            "schema": {
              "$ref": "#/definitions/recording"
            },
            "headers": {
              "Access-Control-Allow-Origin": {
                "type": "string"
              }
            }
          },
          "400": {
            "$ref": "#/responses/Standard400ErrorResponse"
          },
          "401": {
            "$ref": "#/responses/Standard401ErrorResponse"
          },
          "403": {
            "$ref": "#/responses/Standard403ErrorResponse"
          },
          "404": {
            "$ref": "#/responses/Standard404ErrorResponse"
          },
          "500": {
            "$ref": "#/responses/Standard500ErrorResponse"
          },
          "504": {
            "$ref": "#/responses/Standard504ErrorResponse"
          }
        },
        "security": [
          {
            "cloudlink-user-authorizer": []
          },
          {
            "cloudlink-client-authorizer": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Recording"
        ],
        "operationId": "deleteRecording",
        "summary": "Delete recording from the system",
        "description": "Removes the recording from the system.  This operation requires priviledged access.",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/recordingIdParam"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/Standard200Response"
          },
          "202": {
            "$ref": "#/responses/Standard202Response"
          },
          "400": {
            "$ref": "#/responses/Standard400ErrorResponse"
          },
          "401": {
            "$ref": "#/responses/Standard401ErrorResponse"
          },
          "403": {
            "$ref": "#/responses/Standard403ErrorResponse"
          },
          "404": {
            "$ref": "#/responses/Standard404ErrorResponse"
          },
          "500": {
            "$ref": "#/responses/Standard500ErrorResponse"
          },
          "504": {
            "$ref": "#/responses/Standard504ErrorResponse"
          }
        },
        "security": [
          {
            "cloudlink-user-authorizer": []
          },
          {
            "cloudlink-client-authorizer": []
          }
        ]
      }
    },
    "/users/{userId}/conferences": {
      "get": {
        "tags": [
          "Conference"
        ],
        "operationId": "getUserConferences",
        "summary": "Gets conferences for a given user",
        "description": "Get conferences in the context of a user. This contains conferences the user created and being participant of. Data is paged on the server and sorted by most recent conference first. \n*Available Filter Operations*: [eq, ne, lt, gt, le, ge, and, or], i.e. $filter=accessCode eq '339323008'\n*Expandable subresources: tags",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "description": "User Identifier",
            "type": "string"
          },
          {
            "$ref": "#/parameters/skipParam"
          },
          {
            "$ref": "#/parameters/topParam"
          },
          {
            "$ref": "#/parameters/skipTokenParam"
          },
          {
            "$ref": "#/parameters/filterParam"
          },
          {
            "$ref": "#/parameters/orderbyParam"
          },
          {
            "$ref": "#/parameters/expandParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "$ref": "#/definitions/conferenceCollection"
            }
          },
          "400": {
            "$ref": "#/responses/Standard400ErrorResponse"
          },
          "401": {
            "$ref": "#/responses/Standard401ErrorResponse"
          },
          "403": {
            "$ref": "#/responses/Standard403ErrorResponse"
          },
          "500": {
            "$ref": "#/responses/Standard500ErrorResponse"
          },
          "504": {
            "$ref": "#/responses/Standard504ErrorResponse"
          }
        },
        "security": [
          {
            "cloudlink-user-authorizer": []
          },
          {
            "cloudlink-client-authorizer": []
          }
        ]
      }
    },
    "/users/{userId}/attendances": {
      "get": {
        "tags": [
          "Conference"
        ],
        "operationId": "getUserAttendances",
        "summary": "Get user meetings attendances",
        "description": "Retrieve meeting attendance records for a particular user. Data is paged on the server and sorted by most recent meeting attendances.\n",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "description": "User Identifier",
            "type": "string"
          },
          {
            "$ref": "#/parameters/skipParam"
          },
          {
            "$ref": "#/parameters/skipTokenParam"
          },
          {
            "$ref": "#/parameters/topParam"
          },
          {
            "$ref": "#/parameters/filterParam"
          },
          {
            "$ref": "#/parameters/orderbyParam"
          },
          {
            "$ref": "#/parameters/expandParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "$ref": "#/definitions/userAttendanceCollection"
            },
            "headers": {
              "Access-Control-Allow-Origin": {
                "type": "string"
              }
            }
          },
          "401": {
            "$ref": "#/responses/Standard401ErrorResponse"
          },
          "500": {
            "$ref": "#/responses/Standard500ErrorResponse"
          }
        },
        "security": [
          {
            "cloudlink-user-authorizer": []
          },
          {
            "cloudlink-client-authorizer": []
          }
        ]
      }
    }
  },
  "securityDefinitions": {
    "cloudlink-user-authorizer": {
      "type": "oauth2",
      "description": "CloudLink platform user authorizer",
      "flow": "password",
      "tokenUrl": "https://authentication.us.dev.api.mitel.io/2017-09-01/token",
      "scopes": {
        "principal": "Principal security"
      }
    },
    "cloudlink-client-authorizer": {
      "type": "oauth2",
      "description": "CloudLink platform client authorizer",
      "flow": "application",
      "tokenUrl": "https://authentication.us.us.api.mitel.io/2017-09-01/token"
    }
  },
  "definitions": {
    "call": {
      "type": "object",
      "required": [
        "callId"
      ],
      "properties": {
        "callId": {
          "type": "string",
          "description": "Call identifier"
        },
        "siteId": {
          "type": "string",
          "description": "Site identifier. Used for multi-site networked environments"
        },
        "from": {
          "type": "string",
          "description": "Device identifier"
        },
        "fromNumberE164": {
          "type": "boolean",
          "description": "Is the fromNumber a displayable E164 telephone number or extension."
        },
        "fromName": {
          "type": "string",
          "description": "The name presented as the from device"
        },
        "fromPrincipalId": {
          "type": "string",
          "description": "The principalId (could be userId or endpointIf) if known for the from party "
        },
        "to": {
          "type": "string",
          "description": "Destination"
        },
        "toNumberE164": {
          "type": "boolean",
          "description": "Is the fromNumber a displayable E164 telephone number or extension."
        },
        "toName": {
          "type": "string",
          "description": "The name presented from the to device"
        },
        "toPrincipalId": {
          "type": "string",
          "description": "The principalId (could be userId or endpointIf) if known for the to party."
        },
        "state": {
          "type": "string",
          "description": "Possible values: \"unknown\", \"idle\", \"ringing\", \"connected\", \"held\", \"outOfService\", \"completed\". \nShould have a state of \"connected\" for make a call\n"
        },
        "cause": {
          "type": "string",
          "description": "Possible values: \"busy\", \"callBack\", \"callCancelled\", \"callForwardAlways\", \"callForwardBusy\", \"callForwardNoAnswer\", \"callForward\", \"callNotAnswer\", \"destNotObtainable\", \"doNotDisturb\", \"incompatibleDestination\", \"networkCongestion\", \"networkNotObtainable\", \"newCall\", \"redirected\", \"resourcesNotAvailable\", \"transfer\".\nShould have a cause of \"newCall\" for make a call\n"
        },
        "direction": {
          "type": "string",
          "description": "Possible values: \"inbound\", \"outbound\"\nShould be an \"outbound\" call for make a call\n"
        },
        "extraPbxData": {
          "type": "string",
          "description": "Reserved for extra pbx data"
        },
        "createdOn": {
          "type": "string",
          "format": "date-time",
          "description": "UTC creation time in ISO format"
        },
        "endTime": {
          "type": "string",
          "format": "date-time",
          "description": "UTC end time of call in ISO format."
        },
        "completed": {
          "type": "boolean",
          "description": "Call was completed and was answered."
        },
        "ringTime": {
          "type": "number",
          "description": "The time the call was in ring state in seconds."
        },
        "billingTime": {
          "type": "number",
          "description": "The time the call was in connected state in seconds."
        },
        "_links": {
          "type": "object",
          "required": [
            "self"
          ],
          "description": "hypermedia links",
          "properties": {
            "self": {
              "type": "string"
            }
          }
        }
      }
    },
    "callCollection": {
      "type": "object",
      "required": [
        "count",
        "_links"
      ],
      "properties": {
        "_links": {
          "type": "object",
          "description": "hypermedia links",
          "required": [
            "self"
          ],
          "properties": {
            "self": {
              "type": "string",
              "description": "A direct link to this resource url"
            },
            "next": {
              "type": "string",
              "description": "A link to additional paged resources if available."
            }
          }
        },
        "_embedded": {
          "type": "object",
          "required": [
            "items"
          ],
          "description": "Used for embedded objects",
          "properties": {
            "items": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/call"
              }
            }
          }
        },
        "count": {
          "type": "integer"
        }
      }
    },
    "createCallRequest": {
      "type": "object",
      "required": [
        "to"
      ],
      "properties": {
        "from": {
          "type": "string",
          "description": "a valid number from which you have a registration for"
        },
        "fromName": {
          "type": "string",
          "description": "a valid name for which you want the call presented as"
        },
        "to": {
          "type": "string",
          "description": "a valid number to dial"
        },
        "record": {
          "type": "boolean",
          "description": "to start recording on the channel",
          "default": false
        },
        "timeoutMs": {
          "type": "number",
          "description": "DEPRECATED. Use originateTimeout instead. Request timeout value in milliseconds.",
          "default": 6000,
          "minimum": 3000,
          "maximum": 30000
        },
        "originateTimeout": {
          "type": "number",
          "description": "Request to set unanswered timeout in seconds",
          "minimum": 0,
          "maximum": 120
        },
        "successUrl": {
          "type": "string",
          "description": "an optional URL to call back if the command is successful. Will be used for failure urls as well if no failure URL is specified."
        },
        "failureUrl": {
          "type": "string",
          "description": "an optional URL to call back if the command fails. defaults to successUrl if this is specified."
        },
        "associatedCallId": {
          "type": "string",
          "description": "an optional call ID with which to associate the call we are making."
        },
        "executeOnAnswer": {
          "type": "string",
          "description": "an optional action to execute when the call will be answered. If sets to 'bridge`, the call will be bridged with the call having associatedCallId as callId.",
          "enum": [
            "bridge"
          ]
        }
      }
    },
    "address": {
      "type": "object",
      "required": [
        "type",
        "description",
        "url"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "pstn",
            "sip",
            "webrtc"
          ]
        },
        "description": {
          "type": "string",
          "description": "Describes the preferred area of usage for the number.  Eg Internal, US, Canada, toll free, international, etc."
        },
        "url": {
          "type": "string",
          "description": "Location of the resource.  PSTN numbers must be specified with tel:",
          "pattern": "^[a-z]+:.+$"
        },
        "country": {
          "type": "string",
          "description": "Country of PSTN number. The format must be ISO 3166-1 alpha-2 country code. Eg US and CA, etc."
        },
        "city": {
          "type": "string",
          "description": "City of PSTN number."
        },
        "tollFree": {
          "type": "boolean",
          "description": "Indicates if PSTN number is a toll free number."
        }
      }
    },
    "addressCollection": {
      "type": "object",
      "properties": {
        "_links": {
          "type": "object",
          "description": "hypermedia links",
          "properties": {
            "self": {
              "type": "string",
              "description": "A direct link to this resource url"
            },
            "next": {
              "type": "string",
              "description": "A link to additional paged resources if available."
            }
          }
        },
        "_embedded": {
          "type": "object",
          "description": "Used for embedded objects",
          "properties": {
            "items": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/address"
              }
            }
          }
        },
        "count": {
          "type": "integer"
        }
      },
      "additionalProperties": false
    },
    "conference": {
      "type": "object",
      "required": [
        "id",
        "accountId",
        "visibility",
        "accessCode",
        "createdOn",
        "createdBy",
        "modifiedOn",
        "modifiedBy",
        "type",
        "lobbyPolicy",
        "state",
        "_links",
        "_embedded"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "ID of the conference"
        },
        "externalId": {
          "type": "string",
          "description": "ID of external bridge for the conference"
        },
        "accountId": {
          "type": "string",
          "description": "ID of the accountId"
        },
        "name": {
          "type": "string",
          "description": "Name of the conference"
        },
        "visibility": {
          "type": "string",
          "description": "The property is deprecated. Please use type on conference",
          "enum": [
            "private",
            "public"
          ]
        },
        "accessCode": {
          "type": "string",
          "description": "Access code for to dial into the meeting",
          "pattern": "^\\d+$"
        },
        "createdBy": {
          "type": "string",
          "description": "principalId that created the conference.  Creator is automatically added to participants."
        },
        "createdOn": {
          "type": "string",
          "format": "date-time",
          "description": "UTC creation time in ISO format"
        },
        "modifiedBy": {
          "type": "string",
          "description": "principalId that last modified the conference"
        },
        "modifiedOn": {
          "type": "string",
          "format": "date-time",
          "description": "UTC creation time in ISO format"
        },
        "state": {
          "type": "string",
          "enum": [
            "inactive",
            "active"
          ]
        },
        "type": {
          "type": "string",
          "description": "Type of the conference. Default is everyoneAllowed",
          "enum": [
            "everyoneAllowed",
            "inviteOnly"
          ]
        },
        "lobbyPolicy": {
          "type": "string",
          "description": "Lobby policy of conference. The lobbyPolicy can be set to noLobby. Defaut value is guestLobby for a new meeting.",
          "enum": [
            "pstnLobby",
            "guestLobby",
            "nonOwnerLobby",
            "noLobby"
          ]
        },
        "_links": {
          "type": "object",
          "description": "hypermedia links",
          "required": [
            "self",
            "participants"
          ],
          "properties": {
            "self": {
              "type": "string"
            },
            "participants": {
              "type": "string"
            },
            "tags": {
              "type": "string"
            },
            "recordings": {
              "type": "string",
              "description": "Future property for any recordings of this meeting.  Transcripts would be a property of the recording if they exist.  Results could be _embedded if combined with $expand."
            }
          }
        },
        "_embedded": {
          "required": [
            "participants",
            "addresses"
          ],
          "type": "object",
          "description": "Used for embedded objects",
          "properties": {
            "participants": {
              "$ref": "#/definitions/participantCollection"
            },
            "addresses": {
              "$ref": "#/definitions/addressCollection"
            },
            "recordings": {
              "$ref": "#/definitions/recordingCollection"
            },
            "tags": {
              "$ref": "#/definitions/conferenceTagCollection",
              "description": "TODO do we need this?"
            }
          }
        }
      },
      "additionalProperties": false
    },
    "conferenceCollection": {
      "type": "object",
      "required": [
        "_links"
      ],
      "properties": {
        "_links": {
          "type": "object",
          "description": "hypermedia links",
          "required": [
            "self"
          ],
          "properties": {
            "self": {
              "type": "string",
              "description": "A direct link to this resource url"
            },
            "next": {
              "type": "string",
              "description": "A link to additional paged resources if available."
            }
          }
        },
        "_embedded": {
          "type": "object",
          "description": "Used for embedded objects",
          "required": [
            "items"
          ],
          "properties": {
            "items": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/conference"
              }
            },
            "conferenceTags": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/conferenceTag"
              }
            },
            "participantTags": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/participantTag"
              }
            }
          }
        },
        "count": {
          "type": "integer"
        }
      },
      "additionalProperties": false
    },
    "postConferenceByIdRequest": {
      "type": "object",
      "properties": {
        "action": {
          "type": "string",
          "description": "An action to perform on the conference",
          "enum": [
            "end",
            "record",
            "stop-record",
            "pause-record",
            "resume-record"
          ]
        }
      },
      "additionalProperties": false
    },
    "updateConferenceRequest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the conference"
        },
        "lobbyPolicy": {
          "type": "string",
          "description": "Lobby policy of conference.",
          "enum": [
            "pstnLobby",
            "guestLobby",
            "nonOwnerLobby",
            "noLobby"
          ]
        }
      },
      "additionalProperties": false
    },
    "updateConferenceParticipantRequest": {
      "type": "object",
      "properties": {
        "associatedParticipantId": {
          "type": "string",
          "description": "Id of Participant to be associated"
        },
        "muted": {
          "type": "boolean",
          "description": "To enable/disable participant being muted."
        },
        "action": {
          "type": "string",
          "description": "An action to perform on the conference",
          "enum": [
            "leave"
          ]
        },
        "onetimeAcceptance": {
          "type": "boolean",
          "description": "Indicates this is one-time only accpetance"
        }
      },
      "additionalProperties": false
    },
    "postConferenceRequest": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "ID of the conference. It's optional."
        },
        "name": {
          "type": "string",
          "description": "Name of the conference"
        },
        "type": {
          "type": "string",
          "description": "Type of conference",
          "enum": [
            "inviteOnly",
            "everyoneAllowed"
          ]
        },
        "lobbyPolicy": {
          "type": "string",
          "description": "Lobby policy of conference.",
          "enum": [
            "pstnLobby",
            "guestLobby",
            "nonOwnerLobby",
            "noLobby"
          ]
        },
        "accessCodeLength": {
          "type": "number",
          "description": "The length of access code. Default value is 9. Must be between 1 to 99."
        },
        "expiryDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "The access code expires at this time. Rounded to the second."
        },
        "participants": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/postConferenceParticipantRequest"
          }
        }
      },
      "additionalProperties": false
    },
    "conferenceTag": {
      "allOf": [
        {
          "$ref": "#/definitions/resource"
        },
        {
          "type": "object"
        }
      ],
      "required": [
        "id",
        "conferenceId",
        "accountId",
        "value",
        "createdOn",
        "createdBy",
        "modifiedOn",
        "modifiedBy"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "ID of the tag"
        },
        "conferenceId": {
          "type": "string",
          "description": "ID of the conference"
        },
        "accountId": {
          "type": "string",
          "description": "ID of the accountId"
        },
        "value": {
          "type": "string",
          "description": "Value of the tag"
        },
        "createdBy": {
          "type": "string",
          "description": "principalId that created the conference.  Creator is automatically added to participants."
        },
        "createdOn": {
          "type": "string",
          "format": "date-time",
          "description": "UTC creation time in ISO format"
        },
        "modifiedBy": {
          "type": "string",
          "description": "principalId that last modified the conference"
        },
        "modifiedOn": {
          "type": "string",
          "format": "date-time",
          "description": "UTC creation time in ISO format"
        }
      },
      "additionalProperties": false
    },
    "conferenceTagCollection": {
      "type": "object",
      "required": [
        "_links"
      ],
      "properties": {
        "_links": {
          "type": "object",
          "description": "hypermedia links",
          "required": [
            "self"
          ],
          "properties": {
            "self": {
              "type": "string",
              "description": "A direct link to this resource url"
            },
            "next": {
              "type": "string",
              "description": "A link to additional paged resources if available."
            }
          }
        },
        "_embedded": {
          "type": "object",
          "description": "Used for embedded objects",
          "required": [
            "items"
          ],
          "properties": {
            "items": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/conferenceTag"
              }
            }
          }
        },
        "count": {
          "type": "integer"
        }
      },
      "additionalProperties": false
    },
    "contentResultCollection": {
      "allOf": [
        {
          "$ref": "#/definitions/resource"
        },
        {
          "type": "object",
          "properties": {
            "_embedded": {
              "type": "object",
              "required": [
                "items"
              ],
              "description": "Used for embedded objects",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "content",
                      "location",
                      "type"
                    ],
                    "properties": {
                      "content": {
                        "type": "string",
                        "description": "The content found in the resource"
                      },
                      "location": {
                        "type": "string",
                        "description": "A link to the original resource"
                      },
                      "type": {
                        "$ref": "#/definitions/contentResultMatchType"
                      },
                      "_links": {
                        "type": "object",
                        "required": [
                          "conference"
                        ],
                        "description": "hypermedia links",
                        "properties": {
                          "conference": {
                            "description": "A link to parent conference of the matched content",
                            "type": "string"
                          }
                        }
                      },
                      "_embedded": {
                        "description": "Used for embedded objects",
                        "properties": {
                          "location": {
                            "description": "Detailed informationa about the resource at the location",
                            "allOf": [
                              {
                                "$ref": "#/definitions/conference"
                              },
                              {
                                "$ref": "#/definitions/participant"
                              },
                              {
                                "$ref": "#/definitions/recording"
                              }
                            ]
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      ]
    },
    "contentResultMatchType": {
      "type": "string",
      "description": "The type of resource found",
      "enum": [
        "conference",
        "participant",
        "recording"
      ]
    },
    "userAttendance": {
      "type": "object",
      "required": [
        "id",
        "participantId",
        "conferenceId",
        "conferenceInstanceId",
        "accountId",
        "joinTimeStamp",
        "leaveTimeStamp"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "ID of the conference history record"
        },
        "participantId": {
          "type": "string",
          "description": "ID of the participant"
        },
        "conferenceId": {
          "type": "string",
          "description": "ID of the conference"
        },
        "conferenceInstanceId": {
          "type": "string",
          "description": "ID of the conference instance"
        },
        "accountId": {
          "type": "string",
          "description": "ID of the account to which the conference belongs"
        },
        "joinTimeStamp": {
          "type": "string",
          "format": "date-time",
          "description": "Timestamp when the user joined the conference"
        },
        "leaveTimeStamp": {
          "type": "string",
          "format": "date-time",
          "description": "Timestamp when the user left the conference"
        },
        "_links": {
          "type": "object",
          "description": "Hypermedia links",
          "properties": {
            "conference": {
              "type": "string",
              "description": "Link to conference if still extant; absent if conference has been deleted."
            }
          }
        },
        "_embedded": {
          "type": "object",
          "description": "Used for embedded objects",
          "properties": {
            "conference": {
              "$ref": "#/definitions/conference"
            }
          }
        }
      },
      "additionalProperties": false
    },
    "userAttendanceCollection": {
      "type": "object",
      "required": [
        "_links"
      ],
      "properties": {
        "_links": {
          "type": "object",
          "description": "hypermedia links",
          "required": [
            "self"
          ],
          "properties": {
            "self": {
              "type": "string",
              "description": "A direct link to this resource url"
            },
            "next": {
              "type": "string",
              "description": "A link to additional paged resources if available."
            }
          }
        },
        "_embedded": {
          "type": "object",
          "description": "Used for embedded objects",
          "required": [
            "items"
          ],
          "properties": {
            "items": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/userAttendance"
              }
            }
          }
        },
        "count": {
          "type": "integer"
        }
      },
      "additionalProperties": false
    },
    "participantTag": {
      "allOf": [
        {
          "$ref": "#/definitions/resource"
        },
        {
          "type": "object"
        }
      ],
      "required": [
        "id",
        "conferenceId",
        "participantId",
        "accountId",
        "value",
        "createdOn",
        "createdBy",
        "modifiedOn",
        "modifiedBy"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "ID of the tag"
        },
        "conferenceId": {
          "type": "string",
          "description": "ID of the conference"
        },
        "participantId": {
          "type": "string",
          "description": "ID of the participant"
        },
        "accountId": {
          "type": "string",
          "description": "ID of the accountId"
        },
        "value": {
          "type": "string",
          "description": "Value of the tag"
        },
        "createdBy": {
          "type": "string",
          "description": "principalId that created the conference.  Creator is automatically added to participants."
        },
        "createdOn": {
          "type": "string",
          "format": "date-time",
          "description": "UTC creation time in ISO format"
        },
        "modifiedBy": {
          "type": "string",
          "description": "principalId that last modified the conference"
        },
        "modifiedOn": {
          "type": "string",
          "format": "date-time",
          "description": "UTC creation time in ISO format"
        }
      },
      "additionalProperties": false
    },
    "endpoint": {
      "allOf": [
        {
          "$ref": "#/definitions/resource"
        },
        {
          "type": "object"
        }
      ],
      "properties": {
        "endpointId": {
          "type": "string",
          "description": "Device Identifier"
        },
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "description": "Internal use only"
        },
        "state": {
          "type": "string",
          "description": "Possible values: \"unknown\", \"idle\", \"ringing\", \"connected\", \"held\", \"outOfService\".\n"
        },
        "userAvailability": {
          "type": "string",
          "description": "Possible values: \"available\", \"busy\", \"dnd\", \"away\".\n"
        },
        "messageWaiting": {
          "type": "boolean",
          "description": "Message waiting indicator"
        },
        "pstnRouting": {
          "type": "string",
          "description": "Mobile number - Internal use only"
        },
        "dnd": {
          "type": "boolean",
          "description": "Do not disturb"
        }
      }
    },
    "updateEndpointRequest": {
      "type": "object",
      "required": [
        "action",
        "userAvailability"
      ],
      "properties": {
        "action": {
          "type": "string",
          "enum": [
            "dnd",
            "messageWaiting",
            "pstnRouting"
          ]
        },
        "userAvailability": {
          "type": "string",
          "description": "The apps user-availability state it is now in. If dnd, do nothing.",
          "enum": [
            "available",
            "busy",
            "dnd",
            "away"
          ]
        },
        "enabled": {
          "type": "boolean",
          "default": false
        },
        "timeoutMs": {
          "type": "number",
          "description": "Request timeout in milliseconds",
          "default": 6000,
          "minimum": 3000,
          "maximum": 30000
        }
      }
    },
    "updateEndpointCallRequest": {
      "type": "object",
      "required": [
        "action"
      ],
      "properties": {
        "action": {
          "type": "string",
          "description": "An action to perform on the call for the provided endpoint ID",
          "enum": [
            "answer",
            "end",
            "hold",
            "blindTransfer",
            "supervisedTransfer",
            "retrieve",
            "consult",
            "dtmf",
            "conference",
            "pauseRecording",
            "resumeRecording",
            "tagRecording"
          ]
        },
        "args": {
          "type": "string",
          "description": "Optional arguments depending on the action. \n\rExample: if action is hold then do not provide args; if action is blindTransfer then args must be the destination; if action is supervisedTransfer then args must be the callId, provided with the value of transferor's call ID. If the action is dtmf, the args must be digits."
        }
      }
    },
    "participantCollection": {
      "type": "object",
      "properties": {
        "_links": {
          "type": "object",
          "description": "hypermedia links",
          "properties": {
            "self": {
              "type": "string",
              "description": "A direct link to this resource url"
            },
            "next": {
              "type": "string",
              "description": "A link to additional paged resources if available."
            }
          }
        },
        "_embedded": {
          "type": "object",
          "description": "Used for embedded objects",
          "properties": {
            "items": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/participant"
              }
            }
          }
        },
        "count": {
          "type": "integer"
        }
      },
      "additionalProperties": false
    },
    "postConferenceParticipantRequest": {
      "type": "object",
      "required": [
        "participantId"
      ],
      "properties": {
        "participantId": {
          "type": "string",
          "description": "principalId of the participant"
        }
      },
      "additionalProperties": false
    },
    "participant": {
      "allOf": [
        {
          "$ref": "#/definitions/resource"
        },
        {
          "type": "object",
          "required": [
            "participantId",
            "state"
          ],
          "properties": {
            "participantId": {
              "type": "string",
              "description": "principalId of participant"
            },
            "state": {
              "type": "string",
              "enum": [
                "invited",
                "accepted",
                "rejected",
                "active",
                "inactive"
              ]
            },
            "type": {
              "type": "string",
              "enum": [
                "webapi",
                "pstn"
              ]
            },
            "externalId": {
              "type": "string",
              "description": "External id mapping for third party providers."
            },
            "onetimeAcceptance": {
              "type": "boolean",
              "description": "Indicates this is one-time only accpetance"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "participantPostRequest": {
      "type": "object",
      "required": [
        "participantId"
      ],
      "properties": {
        "participantId": {
          "type": "string"
        },
        "onetimeAcceptance": {
          "type": "boolean",
          "description": "Indicates this is one-time only accpetance"
        }
      },
      "additionalProperties": false
    },
    "participantConnection": {
      "type": "object",
      "required": [
        "token",
        "mediaUrl",
        "signalingUrl",
        "turnUrl",
        "externalId",
        "externalConferenceId"
      ],
      "properties": {
        "token": {
          "type": "string",
          "description": "Token used to authenticate with the various streams"
        },
        "mediaUrl": {
          "type": "string",
          "description": "URL of the media stream for this conference for this participant"
        },
        "signalingUrl": {
          "type": "string",
          "description": "URL of the signaling stream for this conference for this participant"
        },
        "turnUrl": {
          "type": "string",
          "description": "URL of the TURN server for this conference for this participant"
        },
        "screenDataUrl": {
          "type": "string",
          "description": "URL of the screen data for this conference for this participant"
        },
        "screenSharingUrl": {
          "type": "string",
          "description": "URL of the screen sharing for this conference for this participant"
        },
        "screenViewingUrl": {
          "type": "string",
          "description": "URL of the screen viewing for this conference for this participant"
        },
        "externalId": {
          "type": "string",
          "description": "ID identifying the participant's connection"
        },
        "externalConferenceId": {
          "type": "string",
          "description": "ID identifying externalId of the conference for convenience."
        }
      },
      "additionalProperties": false
    },
    "resource": {
      "type": "object",
      "required": [
        "_links"
      ],
      "properties": {
        "count": {
          "type": "integer"
        },
        "_links": {
          "type": "object",
          "description": "hypermedia links",
          "required": [
            "self"
          ],
          "properties": {
            "self": {
              "type": "string"
            },
            "next": {
              "type": "string",
              "description": "A link to additional paged resources if available."
            }
          }
        },
        "_embedded": {
          "type": "object",
          "description": "Used for embedded objects",
          "properties": {
            "items": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          }
        }
      }
    },
    "extension": {
      "type": "object",
      "required": [
        "extensionNumber",
        "assignedToPrincipalId",
        "assignedToType"
      ],
      "properties": {
        "extensionNumber": {
          "type": "string",
          "description": "An extension being assigned, which is a dialable number including * and #"
        },
        "assignedToPrincipalId": {
          "type": "string",
          "description": "Identifier of the entity being assigned to"
        },
        "assignedToType": {
          "type": "string",
          "description": "type of entity being assigned to",
          "enum": [
            "user",
            "app",
            "group"
          ]
        },
        "description": {
          "type": "string",
          "description": "Description of the extension"
        }
      }
    },
    "error": {
      "properties": {
        "name": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "recording": {
      "type": "object",
      "required": [
        "recordingId",
        "callId",
        "createdOn",
        "contentType",
        "durationInSeconds",
        "_links"
      ],
      "additionalProperties": false,
      "properties": {
        "recordingId": {
          "type": "string",
          "description": "Unique identifier for this recording."
        },
        "callId": {
          "type": "string",
          "description": "Call ID of the call this recording was generated from."
        },
        "createdOn": {
          "type": "string",
          "format": "date-time",
          "description": "DateTime when the recording was created.  Format is a UTC ISO string."
        },
        "contentType": {
          "type": "string",
          "description": "The media type of the audio.  Is of the IANA format.  Eg audio/opus, audio/PMCA, etc."
        },
        "durationInSeconds": {
          "type": "number",
          "description": "The length of the recording in seconds"
        },
        "label": {
          "type": "string",
          "description": "A label attached to a recording"
        },
        "_links": {
          "type": "object",
          "required": [
            "self"
          ],
          "description": "hypermedia links",
          "properties": {
            "self": {
              "type": "string"
            }
          }
        },
        "_embedded": {
          "type": "object",
          "required": [
            "media"
          ],
          "properties": {
            "media": {
              "type": "object",
              "required": [
                "url",
                "expiry"
              ],
              "properties": {
                "url": {
                  "type": "string",
                  "description": "Time limited URL for retrieving the recording"
                },
                "expiry": {
                  "type": "string",
                  "format": "date-time",
                  "description": "DateTime when the URL will no longer be valid"
                }
              }
            },
            "channelMedia": {
              "type": "array",
              "description": "Optional media split of the recording",
              "items": {
                "type": "object",
                "required": [
                  "channelId",
                  "url",
                  "expiry"
                ],
                "properties": {
                  "channelId": {
                    "type": "string",
                    "description": "ID for the channel in the recording"
                  },
                  "url": {
                    "type": "string",
                    "description": "Time limited URL for retrieving the recording"
                  },
                  "expiry": {
                    "type": "string",
                    "format": "date-time",
                    "description": "DateTime when the URL will no longer be valid"
                  }
                }
              }
            }
          }
        }
      }
    },
    "recordingCollection": {
      "type": "object",
      "required": [
        "_links",
        "count"
      ],
      "additionalProperties": false,
      "properties": {
        "_links": {
          "type": "object",
          "description": "hypermedia links",
          "required": [
            "self"
          ],
          "properties": {
            "self": {
              "type": "string",
              "description": "A direct link to this resource url"
            },
            "next": {
              "type": "string",
              "description": "A link to additional paged resources if available."
            }
          }
        },
        "_embedded": {
          "type": "object",
          "required": [
            "items"
          ],
          "description": "Used for embedded objects",
          "properties": {
            "items": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/recording"
              }
            }
          }
        },
        "count": {
          "type": "integer"
        }
      }
    },
    "updateRecordingRequest": {
      "type": "object",
      "properties": {
        "label": {
          "type": "string",
          "description": "The new label to be attached to the recording"
        }
      },
      "additionalProperties": false
    },
    "callRecordPutRequest": {
      "type": "object",
      "required": [
        "hide"
      ],
      "properties": {
        "hide": {
          "type": "boolean",
          "default": true
        }
      },
      "additionalProperties": false
    }
  },
  "x-amazon-apigateway-binary-media-types": [
    "image/*",
    "video/*",
    "audio/*",
    "application/octet-stream",
    "multipart/form-data",
    "application/pdf"
  ]
}